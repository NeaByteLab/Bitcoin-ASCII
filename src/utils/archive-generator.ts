import { writeFileSync, mkdirSync } from 'fs'
import { join } from 'path'
import { PriceApiService } from '../services/price-api.js'
import { ChartRenderer } from './chart-renderer.js'
import { DataProcessor } from './data-processor.js'
import { TemplateRenderer } from './template-renderer.js'

/**
 * Archive generator for creating historical Bitcoin data files
 */
export class ArchiveGenerator {
  private readonly priceApi = new PriceApiService()
  private readonly chartRenderer = new ChartRenderer()
  private readonly dataProcessor = new DataProcessor()
  private readonly templateRenderer = new TemplateRenderer()

  /**
   * Generate archive file for a specific date
   * @param date - Date to generate archive for (default: today)
   * @returns Promise with archive file path
   */
  async generateArchive(date: Date = new Date()): Promise<string> {
    try {
      console.log(`Generating archive for ${date.toDateString()}...`)
      
      // Use historical data method to get data for the specific date
      const candlesticks = await this.priceApi.getHistoricalData(date)
      const chart = this.chartRenderer.generateCleanChart(candlesticks, 48)
      
      const archiveData = this.calculateArchiveStats(candlesticks)
      const archiveContent = this.generateArchiveContent(date, chart, archiveData)
      
      const archivePath = this.getArchivePath(date)
      this.ensureArchiveDirectory(archivePath)
      
      writeFileSync(archivePath, archiveContent, 'utf8')
      console.log(`âœ“ Archive generated: ${archivePath}`)
      
      return archivePath
    } catch (error) {
      console.error(`Error generating archive: ${error}`)
      throw error
    }
  }

  /**
   * Generate archive for a date range
   * @param startDate - Start date
   * @param endDate - End date
   * @returns Promise with array of archive file paths
   */
  async generateArchiveRange(startDate: Date, endDate: Date): Promise<string[]> {
    const archives: string[] = []
    const currentDate = new Date(startDate)
    
    while (currentDate <= endDate) {
      try {
        const archivePath = await this.generateArchive(currentDate)
        archives.push(archivePath)
      } catch (error) {
        console.error(`Failed to generate archive for ${currentDate.toDateString()}: ${error}`)
      }
      
      currentDate.setDate(currentDate.getDate() + 1)
    }
    
    return archives
  }

  /**
   * Calculate archive statistics from candlestick data
   * @param candlesticks - Array of candlestick data
   * @returns Archive statistics
   */
  private calculateArchiveStats(candlesticks: any[]): {
    high: number
    low: number
    open: number
    close: number
    change: number
    changePercent: number
    volume: number
    avgPrice: number
  } {
    if (candlesticks.length === 0) {
      throw new Error('No candlestick data available')
    }

    const prices = candlesticks.map(c => c.close)
    const volumes = candlesticks.map(c => c.volume || 0)
    
    const high = Math.max(...candlesticks.map(c => c.high))
    const low = Math.min(...candlesticks.map(c => c.low))
    const open = candlesticks[0].open
    const close = candlesticks[candlesticks.length - 1].close
    const change = close - open
    const changePercent = ((change / open) * 100)
    const volume = volumes.reduce((sum, vol) => sum + vol, 0)
    const avgPrice = prices.reduce((sum, price) => sum + price, 0) / prices.length

    return {
      high,
      low,
      open,
      close,
      change,
      changePercent,
      volume,
      avgPrice
    }
  }

  /**
   * Generate archive content with chart and statistics
   * @param date - Archive date
   * @param chart - ASCII chart
   * @param stats - Archive statistics
   * @returns Archive content string
   */
  private generateArchiveContent(date: Date, chart: string, stats: any): string {
    const changeEmoji = stats.changePercent >= 0 ? 'ðŸŸ¢' : 'ðŸ”´'
    const changeSign = stats.changePercent >= 0 ? '+' : ''
    
    return `# Bitcoin Archive - ${date.toDateString()} ðŸ“Š

## ðŸ“ˆ 24-Hour Bitcoin Chart (30m intervals)

\`\`\`
${chart}
\`\`\`

## ðŸ“Š Daily Statistics

| Metric | Value |
|--------|-------|
| Date | ${date.toDateString()} |
| Open | $${stats.open.toLocaleString()} |
| Close | $${stats.close.toLocaleString()} |
| High | $${stats.high.toLocaleString()} |
| Low | $${stats.low.toLocaleString()} |
| Change | ${changeEmoji} ${changeSign}$${stats.change.toFixed(2)} |
| Change % | ${changeEmoji} ${changeSign}${stats.changePercent.toFixed(2)}% |
| Volume | $${(stats.volume / 1e6).toFixed(2)}M |
| Avg Price | $${stats.avgPrice.toLocaleString()} |

## ðŸ“… Trading Session

- **Period:** 24 hours (48 x 30-minute intervals)
- **Data Source:** Binance Futures API

---
*Generated by Bitcoin-ASCII Archive System*
`
  }

  /**
   * Get archive file path for a specific date
   * @param date - Date for archive
   * @returns Archive file path
   */
  private getArchivePath(date: Date): string {
    const year = date.getFullYear()
    const month = String(date.getMonth() + 1).padStart(2, '0')
    const day = String(date.getDate()).padStart(2, '0')
    const filename = `${month}_${day}.md`
    
    return join(process.cwd(), 'archive', String(year), filename)
  }

  /**
   * Ensure archive directory exists
   * @param archivePath - Archive file path
   */
  private ensureArchiveDirectory(archivePath: string): void {
    const dir = join(archivePath, '..')
    mkdirSync(dir, { recursive: true })
  }
} 